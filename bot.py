import datetime
import pytz
from tinydb import TinyDB, Query
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from apscheduler.schedulers.background import BackgroundScheduler
import asyncio

TOKEN = "8087039975:AAHilkGMZAIwQtglfaeApBHDpcNREqlpCNE"
db = TinyDB("db.json")
User = Query()

waiting_for_name = set()
waiting_for_gender = set()

keyboard = [
    ["–û–±—ñ–π–º–∏", "–°–∫–∞–∂–∏ —â–æ—Å—å –º–∏–ª–µ"],
    ["–°–∫—ñ–ª—å–∫–∏ –∑–∞—Ä–∞–∑ —á–∞—Å—É", "–ö–æ—Ç–∏–∫ üê±"],
    ["–ó–∞–ø–∏—à–∏ –º–æ—î —ñ–º'—è"]
]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# ---------- –ö–û–†–ò–°–¢–£–í–ê–ß ----------
def get_user(user_id):
    result = db.search(User.id == user_id)
    return result[0] if result else None

def save_user(user_id, name=None, gender=None):
    user = get_user(user_id)
    if user:
        update_data = {}
        if name:
            update_data["name"] = name
        if gender:
            update_data["gender"] = gender
        db.update(update_data, User.id == user_id)
    else:
        db.insert({"id": user_id, "name": name, "gender": gender, "todo": []})

def gendered(name, gender):
    if gender == "–∂":
        return name or "–∑–∞–π—á–∏—á–∫–æ"
    elif gender == "—á":
        return name or "–∑–∞–π—á–∏–∫—É"
    else:
        return name or "–∑–∞–π—á–∏–∫"

# ---------- –ö–û–ú–ê–ù–î–ê /start ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤ –∫—É! –û–±–µ—Ä–∏ —â–æ—Å—å ‚§µÔ∏è", reply_markup=reply_markup)

# ---------- –ö–û–ú–ê–ù–î–ê /help ----------
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "\U0001F496 *–ü—Ä–∏–≤ –∫—É!* –Ø –•—ñ–Ω–∞-–ë–æ—Ç–∏–∫ ‚Äî —Ç–≤–æ—è –º º—è–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–∞ –ø–æ–º—ñ—á–Ω–∏—Ü—è \U0001F338\n\n"
        "–Ø –≤–º—ñ—é:\n"
        "‚Ä¢ –í–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–ø—Ä–∞–≤: `/todo –∫—É–ø–∏—Ç–∏ —á–∞–π`\n"
        "‚Ä¢ –í–∏–¥–∞–ª–∏—Ç–∏ —Å–ø—Ä–∞–≤—É: `/todo del 1`\n"
        "‚Ä¢ –í—ñ–¥–º—ñ—Ç–∏—Ç–∏ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ: `/done 1`\n"
        "‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç–∏ —á–∞—Å: –Ω–∞–ø–∏—à–∏ ‚Äú–°–∫—ñ–ª—å–∫–∏ –∑–∞—Ä–∞–∑ —á–∞—Å—É‚Äù\n"
        "‚Ä¢ –û–±—ñ–π–º–∞—Ç–∏, –º—É—Ä–∫–∞—Ç–∏ —ñ –∫–æ—Ç–∏–∫–∞ –¥–∞–≤–∞—Ç–∏ \U0001F431\n"
        "‚Ä¢ –ù–∞–≥–∞–¥–∞—Ç–∏ –≤–∏–ø–∏—Ç–∏ –≤–æ–¥–∏—á–∫–∏: `/hydrate` –∞–±–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ üíß\n\n"
        "\U0001F4CB *–ö–æ–º–∞–Ω–¥–∏:*\n"
        "/start ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏\n"
        "/todo ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ø—Ä–∞–≤\n"
        "/done ‚Äî –≤—ñ–¥–º—ñ—Ç–∏—Ç–∏ —Å–ø—Ä–∞–≤—É –≤–∏–∫–æ–Ω–∞–Ω–æ—é\n"
        "/hydrate ‚Äî –≤–∏–ø–∏—Ç–∏ –≤–æ–¥–∏ üíß\n"
        "/profile ‚Äî –ø—Ä–æ—Ñ—ñ–ª—å\n"
        "/help ‚Äî —Ü—è –¥–æ–≤—ñ–¥–∫–∞\n\n"
        "\U0001F9E0 –Ø –∑–∞–ø–∞–º º—è—Ç–æ–≤—É—é —Ç–≤–æ—î —ñ–º º—è —ñ —Å—Ç–∞—Ç—å, —â–æ–± —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å –∑ —Ç–æ–±–æ—é –∑ –ª—é–±–æ–≤ º—é \U0001F4AA"
    )
    await update.message.reply_text(text, parse_mode="Markdown")

# ---------- –ö–û–ú–ê–ù–î–ê /hydrate ----------
async def hydrate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user = get_user(user_id)
    name = user.get("name") if user else None
    gender = user.get("gender") if user else None
    short = gendered(name, gender)

    await update.message.reply_text(
        f"{short}, –Ω–∞–≥–∞–¥—É—é –≤–∏–ø–∏—Ç–∏ —Å–∫–ª—è–Ω–∫—É –≤–æ–¥–∏—á–∫–∏ üíß\n"
        "–¢–≤–æ—î —Ç—ñ–ª–æ ‚Äî —Ç–≤—ñ–π —Ö—Ä–∞–º, –Ω–∞–≤—ñ—Ç—å —É –ª–∞–ø–∫–∞—Ö üêæ"
    )

# ---------- –©–û–î–ï–ù–ù–ï –û–ß–ò–©–ï–ù–ù–Ø ----------
def clear_all_todos():
    users = db.all()
    for user in users:
        if "todo" in user:
            db.update({"todo": []}, User.id == user["id"])
    print("–©–æ–¥–µ–Ω–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è TODO –≤–∏–∫–æ–Ω–∞–Ω–æ")

# ---------- –ù–ê–ì–ê–î–£–í–ê–ù–ù–Ø –ü–†–û –í–û–î–£ ----------
async def send_hydrate_reminder(app):
    for user in db.all():
        user_id = user["id"]
        name = user.get("name")
        gender = user.get("gender")
        short = gendered(name, gender)
        try:
            await app.bot.send_message(
                chat_id=user_id,
                text=f"{short}, –Ω–µ –∑–∞–±—É–¥—å –ø–∏—Ç–∏ –≤–æ–¥—É üíß –¢–≤—ñ–π –º—É—Ä—á–∞–ª—å–Ω–∏–π –æ—Ä–≥–∞–Ω—ñ–∑–º —Ü—å–æ–≥–æ –ø–æ—Ç—Ä–µ–±—É—î!"
            )
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

# ---------- –ó–ê–ü–£–°–ö ----------
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("todo", todo))
app.add_handler(CommandHandler("done", done))
app.add_handler(CommandHandler("hydrate", hydrate))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

scheduler = BackgroundScheduler(timezone="Europe/Kyiv")
scheduler.add_job(clear_all_todos, "cron", hour=0, minute=0)
scheduler.add_job(lambda: asyncio.create_task(send_hydrate_reminder(app)), "cron", hour="10,14,18")
scheduler.start()

print("‚ú® –•—ñ–Ω–∞-–ë–æ—Ç–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ –∑ TODO, /help, /hydrate —Ç–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º –ø–∏—Ç–∏ –≤–æ–¥—É üêæ")
app.run_polling()