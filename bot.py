import datetime
import pytz
import json
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# üîê –¢–≤—ñ–π —Ç–æ–∫–µ–Ω (—Ç—ñ–ª—å–∫–∏ –Ω–µ –ø—É–±–ª—ñ–∫—É–π –ø—É–±–ª—ñ—á–Ω–æ üòø)
TOKEN = "8087039975:AAHilkGMZAIwQtglfaeApBHDpcNREqlpCNE"
USERS_FILE = "users.json"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–º–µ–Ω
def load_users():
    if not os.path.exists(USERS_FILE):
        return {}
    with open(USERS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–º–µ–Ω
def save_users(users):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

users = load_users()
waiting_for_name = set()

# /start ‚Äî –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è + –∫–Ω–æ–ø–æ—á–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["–û–±—ñ–π–º–∏", "–°–∫–∞–∂–∏ —â–æ—Å—å –º–∏–ª–µ"],
        ["–°–∫—ñ–ª—å–∫–∏ –∑–∞—Ä–∞–∑ —á–∞—Å—É", "–ö–æ—Ç–∏–∫ üê±"],
        ["–ó–∞–ø–∏—à–∏ –º–æ—î —ñ–º'—è"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤ –∫—É! –û–±–µ—Ä–∏ —â–æ—Å—å ‚§µÔ∏è", reply_markup=reply_markup)

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    text = update.message.text.strip()
    lower_text = text.lower()

    # –Ø–∫—â–æ –Ω–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    if user_id not in users and user_id not in waiting_for_name:
        waiting_for_name.add(user_id)
        await update.message.reply_text("–ü—Ä–∏–≤ –∫—É, —è —Ç–µ–±–µ —â–µ –Ω–µ –∑–Ω–∞—é! –Ø–∫ —Ç–µ–±–µ –Ω–∞–∑–∏–≤–∞—Ç–∏? üí¨")
        return

    # –Ø–∫—â–æ —á–µ–∫–∞—î–º–æ —ñ–º º—è
    if user_id in waiting_for_name:
        users[user_id] = text
        save_users(users)
        waiting_for_name.remove(user_id)
        await update.message.reply_text(f"–ó–±–µ—Ä–µ–≥–ª–∞! –¢–µ–ø–µ—Ä —è —Ç–µ–±–µ –∑–≤–∞—Ç–∏–º—É: {text} üå∏")
        return

    # –Ü–º º—è –∑ –±–∞–∑–∏
    name = users.get(user_id, "–º–æ—è –∑—ñ—Ä–æ–Ω—å–∫–∞ ‚ú®")

    # –†–µ–∞–∫—Ü—ñ—ó
    if "–æ–±—ñ–π–º–∏" in lower_text:
        await update.message.reply_text(f"–î–æ–±—Ä–µ, {name}, –ª–æ–≤–∏–∏–∏ –æ–±—ñ–π–º–∏! ü§ó")

    elif "—Å–∫–∞–∂–∏" in lower_text:
        await update.message.reply_text(f"–¢–∏ —á—É–¥–æ–≤–∞, {name}. –Ø –∑–∞–≤–∂–¥–∏ –ø–æ—Ä—É—á üíó")

    elif "—á–∞—Å" in lower_text or "–≥–æ–¥–∏–Ω–∞" in lower_text:
        kyiv_time = datetime.datetime.now(pytz.timezone("Europe/Kyiv")).strftime("%H:%M")
        await update.message.reply_text(f"{name}, –∑–∞—Ä–∞–∑ –≤ –£–∫—Ä–∞—ó–Ω—ñ: {kyiv_time} üï∞Ô∏è")

    elif "–∫–æ—Ç–∏–∫" in lower_text:
        await update.message.reply_animation("https://media.giphy.com/media/JIX9t2j0ZTN9S/giphy.gif")

    elif "–∑–∞–ø–∏—à–∏" in lower_text or "—ñ–º'—è" in lower_text:
        waiting_for_name.add(user_id)
        await update.message.reply_text("–ù–∞–ø–∏—à–∏, —è–∫ —Ç–µ–±–µ –Ω–∞–∑–∏–≤–∞—Ç–∏ üí¨")

    else:
        await update.message.reply_text(f"–ú—É—Ä? –Ø —â–µ –Ω–µ –∑–Ω–∞—é —Ü—ñ —Å–ª–æ–≤–∞, {name} ü•∫")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

print("üêæ –•—ñ–Ω–∞-–ë–æ—Ç–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ –∑ –ª—é–±–æ–≤ º—é")
app.run_polling()
