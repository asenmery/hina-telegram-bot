import datetime
import pytz
from tinydb import TinyDB, Query
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# –¢–æ–∫–µ–Ω
TOKEN = "8087039975:AAHilkGMZAIwQtglfaeApBHDpcNREqlpCNE"
db = TinyDB("db.json")
User = Query()

# –¢–∏–º—á–∞—Å–æ–≤—ñ —Å–ø–∏—Å–∫–∏
waiting_for_name = set()
waiting_for_gender = set()

# –ö–Ω–æ–ø–∫–∏
keyboard = [
    ["–û–±—ñ–π–º–∏", "–°–∫–∞–∂–∏ —â–æ—Å—å –º–∏–ª–µ"],
    ["–°–∫—ñ–ª—å–∫–∏ –∑–∞—Ä–∞–∑ —á–∞—Å—É", "–ö–æ—Ç–∏–∫ üê±"],
    ["–ó–∞–ø–∏—à–∏ –º–æ—î —ñ–º'—è"]
]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤ –∫—É! –û–±–µ—Ä–∏ —â–æ—Å—å ‚§µÔ∏è", reply_markup=reply_markup)

# /profile (–∞–Ω–≥–ª—ñ–π—Å—å–∫–∞ –≤–µ—Ä—Å—ñ—è)
async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user = get_user(user_id)

    if not user:
        await update.message.reply_text("I don't know you yet üòø Say something to start!")
        return

    name = user.get("name", "unknown")
    gender = user.get("gender", "unknown")
    if gender == "–∂":
        gender_text = "female"
    elif gender == "—á":
        gender_text = "male"
    else:
        gender_text = "not specified"

    await update.message.reply_text(
        f"Here is your profile, {gendered(name, gender)} ü™û\n"
        f"Name: {name}\n"
        f"Gender: {gender_text}"
    )

# –û—Ç—Ä–∏–º–∞—Ç–∏ —é–∑–µ—Ä–∞
def get_user(user_id):
    result = db.search(User.id == user_id)
    return result[0] if result else None

# –ó–±–µ—Ä–µ–≥—Ç–∏ —é–∑–µ—Ä–∞
def save_user(user_id, name=None, gender=None):
    user = get_user(user_id)
    if user:
        update_data = {}
        if name:
            update_data["name"] = name
        if gender:
            update_data["gender"] = gender
        db.update(update_data, User.id == user_id)
    else:
        db.insert({"id": user_id, "name": name, "gender": gender})

# –ó–≤–µ—Ä—Ç–∞–Ω–Ω—è
def gendered(name, gender):
    if gender == "–∂":
        return name or "–∑–∞–π—á–∏—á–∫–æ"
    elif gender == "—á":
        return name or "–∑–∞–π—á–∏–∫—É"
    else:
        return name or "–∑–∞–π—á–∏–∫"

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.strip()
    lower_text = text.lower()

    if user_id in waiting_for_name:
        save_user(user_id, name=text)
        waiting_for_name.remove(user_id)
        waiting_for_gender.add(user_id)
        await update.message.reply_text("–ê —Ç–∏ —Ö–ª–æ–ø–µ—Ü—å —á–∏ –¥—ñ–≤—á–∏–Ω–∞? üíôüíñ\n(–Ω–∞–ø–∏—à–∏ '—á–æ–ª–æ–≤—ñ–∫' –∞–±–æ '–∂—ñ–Ω–∫–∞')")
        return

    if user_id in waiting_for_gender:
        if "–∂" in lower_text:
            save_user(user_id, gender="–∂")
            waiting_for_gender.remove(user_id)
            await update.message.reply_text("–ó—Ä–æ–∑—É–º—ñ–ª–∞ üå∏ –¢–µ–ø–µ—Ä —è —Ç–µ–±–µ –ø–∞–º º—è—Ç–∞—é!")
        elif "—á" in lower_text:
            save_user(user_id, gender="—á")
            waiting_for_gender.remove(user_id)
            await update.message.reply_text("–ó—Ä–æ–∑—É–º—ñ–≤ üíô –¢–µ–ø–µ—Ä —è —Ç–µ–±–µ –ø–∞–º º—è—Ç–∞—é!")
        else:
            await update.message.reply_text("–ù–∞–ø–∏—à–∏, –±—É–¥—å –ª–∞—Å–∫–∞, '–∂—ñ–Ω–∫–∞' –∞–±–æ '—á–æ–ª–æ–≤—ñ–∫' üåº")
        return

    user = get_user(user_id)
    name = user["name"] if user else None
    gender = user["gender"] if user else None
    short = gendered(name, gender)

    if not name:
        waiting_for_name.add(user_id)
        await update.message.reply_text("–ü—Ä–∏–≤ –∫—É, —è —Ç–µ–±–µ —â–µ –Ω–µ –∑–Ω–∞—é! –Ø–∫ —Ç–µ–±–µ –Ω–∞–∑–∏–≤–∞—Ç–∏? üí¨")
        return

    if "–æ–±—ñ–π–º–∏" in lower_text:
        await update.message.reply_text(f"–î–æ–±—Ä–µ, {short}, –ª–æ–≤–∏–∏–∏ –æ–±—ñ–π–º–∏! ü§ó")

    elif "—Å–∫–∞–∂–∏" in lower_text:
        await update.message.reply_text(f"–¢–∏ —á—É–¥–æ–≤–∞, {short}. –Ø –∑–∞–≤–∂–¥–∏ –ø–æ—Ä—É—á üíó")

    elif "—á–∞—Å" in lower_text or "–≥–æ–¥–∏–Ω–∞" in lower_text:
        kyiv_time = datetime.datetime.now(pytz.timezone("Europe/Kyiv")).strftime("%H:%M")
        await update.message.reply_text(f"{short}, –∑–∞—Ä–∞–∑ –≤ –£–∫—Ä–∞—ó–Ω—ñ: {kyiv_time} üï∞Ô∏è")

    elif "–∫–æ—Ç–∏–∫" in lower_text:
        await update.message.reply_animation("https://media.giphy.com/media/JIX9t2j0ZTN9S/giphy.gif")

    elif "–∑–∞–ø–∏—à–∏" in lower_text or "—ñ–º'—è" in lower_text:
        waiting_for_name.add(user_id)
        await update.message.reply_text("–ù–∞–ø–∏—à–∏, —è–∫ —Ç–µ–±–µ –Ω–∞–∑–∏–≤–∞—Ç–∏ üí¨")

    else:
        await update.message.reply_text(f"–ú—É—Ä? –Ø —â–µ –Ω–µ –∑–Ω–∞—é —Ü—ñ —Å–ª–æ–≤–∞, {short} ü•∫")

# –ó–∞–ø—É—Å–∫
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("profile", profile))  # üåç –∞–Ω–≥–ª–æ–º–æ–≤–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

print("‚ú® –•—ñ–Ω–∞-–ë–æ—Ç–∏–∫ –∑ –∫–æ–º–∞–Ω–¥–æ—é /profile –∑–∞–ø—É—â–µ–Ω–æ üêæ")
app.run_polling()
