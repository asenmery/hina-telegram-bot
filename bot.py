# –•—ñ–Ω–∞-–ë–æ—Ç–∏–∫ —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º todo —ñ help
import datetime
import pytz
from tinydb import TinyDB, Query
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from apscheduler.schedulers.background import BackgroundScheduler

TOKEN = "8087039975:AAHilkGMZAIwQtglfaeApBHDpcNREqlpCNE"
db = TinyDB("/data/db.json")
User = Query()

waiting_for_name = set()
waiting_for_gender = set()

keyboard = [
    ["üÜï –ù–æ–≤–∞ —Å–ø—Ä–∞–≤–∞", "üìã –°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ —Å–ø—Ä–∞–≤–∏"],
    ["üß∏ –û–±—ñ–π–º–∏", "üò∫ –ö–æ—Ç–∏–∫"]
]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_user(user_id):
    result = db.search(User.id == user_id)
    return result[0] if result else None

def save_user(user_id, name=None, gender=None):
    user = get_user(user_id)
    if user:
        update_data = {}
        if name: update_data["name"] = name
        if gender: update_data["gender"] = gender
        db.update(update_data, User.id == user_id)
    else:
        db.insert({"id": user_id, "name": name, "gender": gender, "todo": []})

def gendered(name, gender):
    if gender == "–∂": return name or "–∑–∞–π—á–∏—á–∫–æ"
    elif gender == "—á": return name or "–∑–∞–π—á–∏–∫—É"
    else: return name or "–∑–∞–π—á–∏–∫"

def parse_date(text):
    today = datetime.date.today()
    weekdays = {
        "–ø–æ–Ω–µ–¥—ñ–ª–æ–∫": 0, "–≤—ñ–≤—Ç–æ—Ä–æ–∫": 1, "—Å–µ—Ä–µ–¥–∞": 2,
        "—á–µ—Ç–≤–µ—Ä": 3, "–ø º—è—Ç–Ω–∏—Ü—è": 4, "—Å—É–±–æ—Ç–∞": 5, "–Ω–µ–¥—ñ–ª—è": 6
    }
    text = text.strip().lower()
    if text == "—Å—å–æ–≥–æ–¥–Ω—ñ": return today.strftime("%Y-%m-%d")
    elif text == "–∑–∞–≤—Ç—Ä–∞": return (today + datetime.timedelta(days=1)).strftime("%Y-%m-%d")
    elif text in weekdays:
        current = today.weekday()
        target = weekdays[text]
        days_ahead = (target - current + 7) % 7 or 7
        return (today + datetime.timedelta(days=days_ahead)).strftime("%Y-%m-%d")
    try:
        return datetime.datetime.strptime(text, "%Y-%m-%d").strftime("%Y-%m-%d")
    except:
        return None

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üå∏ –Ø ‚Äî –•—ñ–Ω–∞-–ë–æ—Ç–∏–∫, —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫!\n"
        "–û—Å—å —â–æ —è –≤–º—ñ—é:\n"
        "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞\n"
        "/status ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —è –∂–∏–≤–∏–π\n"
        "/profile ‚Äî —Ç–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\n"
        "/todo —Å–ø—Ä–∞–≤–∞ | –¥–∞—Ç–∞ ‚Äî –¥–æ–¥–∞—Ç–∏\n"
        "/todo –¥–∞—Ç–∞ ‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å\n"
        "/todo del –Ω–æ–º–µ—Ä ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏\n"
        "/done –Ω–æ–º–µ—Ä ‚Äî –ø–æ–∑–Ω–∞—á–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–∏–º\n"
        "/hydrate ‚Äî –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –≤–æ–¥—É üíß"
    )
    await update.message.reply_text(text)

async def todo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user(update.message.from_user.id)
    if not user:
        save_user(update.message.from_user.id)
        user = get_user(update.message.from_user.id)

    args = context.args
    if args and args[0] == "del" and len(args) > 1:
        try:
            i = int(args[1]) - 1
            removed = user["todo"].pop(i)
            db.update({"todo": user["todo"]}, User.id == user["id"])
            return await update.message.reply_text(f"‚ùå –í–∏–¥–∞–ª–µ–Ω–æ: {removed['text']}")
        except:
            return await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è üòø –ü–µ—Ä–µ–≤—ñ—Ä –Ω–æ–º–µ—Ä.")

    elif args and args[0] != "del":
        query = " ".join(args)
        if "|" in query:
            text, date_text = map(str.strip, query.split("|", 1))
            due = parse_date(date_text)
            if not due:
                return await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∞ –¥–∞—Ç–∞. –ü—Ä–∏–∫–ª–∞–¥: /todo –ö—É–ø–∏—Ç–∏ —á–∞–π | –∑–∞–≤—Ç—Ä–∞")
            user["todo"].append({"text": text, "due": due, "done": False})
            db.update({"todo": user["todo"]}, User.id == user["id"])
            return await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ: {text} –Ω–∞ {due}")

        due = parse_date(query)
        if due:
            tasks = [t for t in user["todo"] if t.get("due") == due]
            if not tasks:
                return await update.message.reply_text(f"–ù–∞ {due} —É —Ç–µ–±–µ –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î ‚ú®")
            msg = f"üìÖ –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ {due}:\n"
            for i, t in enumerate(tasks):
                checkbox = "‚úÖ" if t.get("done") else "‚¨ú"
                msg += f"{i+1}. {checkbox} {t['text']}\n"
            return await update.message.reply_text(msg)

    # –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
    today = datetime.date.today().strftime("%Y-%m-%d")
    tasks = [t for t in user["todo"] if t.get("due") == today]
    if not tasks:
        return await update.message.reply_text("–ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —É —Ç–µ–±–µ –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î ‚ú®")

    msg = "üìã –°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ —Å–ø—Ä–∞–≤–∏:\n"
    for i, t in enumerate(tasks):
        checkbox = "‚úÖ" if t.get("done") else "‚¨ú"
        msg += f"{i+1}. {checkbox} {t['text']}\n"
    await update.message.reply_text(msg)

# –î–æ–¥–∞—Ç–∏ –≤ app:
# app.add_handler(CommandHandler("todo", todo))
# app.add_handler(CommandHandler("help", help_command))
