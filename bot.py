import datetime
import pytz
import asyncio
from tinydb import TinyDB, Query
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from apscheduler.schedulers.background import BackgroundScheduler

TOKEN = "8087039975:AAHilkGMZAIwQtglfaeApBHDpcNREqlpCNE"
db = TinyDB("/data/db.json")
User = Query()

waiting_for_name = set()
waiting_for_gender = set()

keyboard = [
    ["–û–±—ñ–π–º–∏", "–°–∫–∞–∂–∏ —â–æ—Å—å –º–∏–ª–µ"],
    ["–°–∫—ñ–ª—å–∫–∏ –∑–∞—Ä–∞–∑ —á–∞—Å—É", "–ö–æ—Ç–∏–∫ üê±"],
    ["–ó–∞–ø–∏—à–∏ –º–æ—î —ñ–º'—è"]
]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_user(user_id):
    result = db.search(User.id == user_id)
    return result[0] if result else None

def save_user(user_id, name=None, gender=None):
    user = get_user(user_id)
    if user:
        update_data = {}
        if name:
            update_data["name"] = name
        if gender:
            update_data["gender"] = gender
        db.update(update_data, User.id == user_id)
    else:
        db.insert({"id": user_id, "name": name, "gender": gender, "todo": []})

def gendered(name, gender):
    if gender == "–∂":
        return name or "–∑–∞–π—á–∏—á–∫–æ"
    elif gender == "—á":
        return name or "–∑–∞–π—á–∏–∫—É"
    else:
        return name or "–∑–∞–π—á–∏–∫"

def gendered_phrase(gender, feminine: str, masculine: str, neutral: str = "—á—É–¥–æ–≤–∞(–∏–π)"):
    if gender == "–∂":
        return feminine
    elif gender == "—á":
        return masculine
    else:
        return neutral

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤ –∫—É! –û–±–µ—Ä–∏ —â–æ—Å—å ‚§µÔ∏è", reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üíñ *–ü—Ä–∏–≤ –∫—É!* –Ø –•—ñ–Ω–∞-–ë–æ—Ç–∏–∫ ‚Äî —Ç–≤–æ—è –º º—è–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–∞ –ø–æ–º—ñ—á–Ω–∏—Ü—è üå∏\n\n"
        "–Ø –≤–º—ñ—é:\n"
        "‚Ä¢ –í–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–ø—Ä–∞–≤: `/todo –∫—É–ø–∏—Ç–∏ —á–∞–π`\n"
        "‚Ä¢ –í–∏–¥–∞–ª–∏—Ç–∏ —Å–ø—Ä–∞–≤—É: `/todo del 1`\n"
        "‚Ä¢ –í—ñ–¥–º—ñ—Ç–∏—Ç–∏ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ: `/done 1`\n"
        "‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç–∏ —á–∞—Å: –Ω–∞–ø–∏—à–∏ ‚Äú–°–∫—ñ–ª—å–∫–∏ –∑–∞—Ä–∞–∑ —á–∞—Å—É‚Äù\n"
        "‚Ä¢ –ù–∞–≥–∞–¥–∞—Ç–∏ –≤–∏–ø–∏—Ç–∏ –≤–æ–¥–∏—á–∫–∏: `/hydrate` –∞–±–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ üíß\n\n"
        "üìã *–ö–æ–º–∞–Ω–¥–∏:*\n"
        "/start ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏\n"
        "/status ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –±–æ—Ç –∂–∏–≤–∏–π\n"
        "/profile ‚Äî –ø—Ä–æ—Ñ—ñ–ª—å\n"
        "/hydrate ‚Äî –≤–∏–ø–∏—Ç–∏ –≤–æ–¥–∏ üíß\n"
        "/done ‚Äî –≤—ñ–¥–º—ñ—Ç–∏—Ç–∏ —Å–ø—Ä–∞–≤—É –≤–∏–∫–æ–Ω–∞–Ω–æ—é\n"
        "/help ‚Äî —Ü—è –¥–æ–≤—ñ–¥–∫–∞\n"
    )
    await update.message.reply_text(text, parse_mode="Markdown")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –Ø –∂–∏–≤–∏–π —ñ –º—É—Ä—á—É —Å—Ç–∞–±—ñ–ª—å–Ω–æ! üêæ")

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user = get_user(user_id)
    if user:
        name = user.get("name", "(–Ω–µ –≤–∫–∞–∑–∞–Ω–æ)")
        gender = user.get("gender", "(–Ω–µ –≤–∫–∞–∑–∞–Ω–æ)")
        await update.message.reply_text(f"üë§ –ü—Ä–æ—Ñ—ñ–ª—å:\n–Ü–º'—è: {name}\n–°—Ç–∞—Ç—å: {gender}")
    else:
        await update.message.reply_text("–Ø —Ç–µ–±–µ —â–µ –Ω–µ –∑–Ω–∞—é üòø –ù–∞–ø–∏—à–∏ '–ó–∞–ø–∏—à–∏ –º–æ—î —ñ–º'—è'")

async def hydrate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üíß –ù–µ –∑–∞–±—É–¥—å –ø–æ–ø–∏—Ç–∏ –≤–æ–¥–∏—á–∫–∏, –º–æ—î —Å–µ—Ä–¥–µ–Ω—å–∫–æ!")

async def done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –£—è–≤—ñ–º–æ, —â–æ —Å–ø—Ä–∞–≤–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞! (—Ç–∏–º—á–∞—Å–æ–≤–æ)")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.strip()
    lower_text = text.lower()

    if user_id in waiting_for_name:
        save_user(user_id, name=text)
        waiting_for_name.remove(user_id)
        waiting_for_gender.add(user_id)
        await update.message.reply_text("–ê —Ç–∏ —Ö–ª–æ–ø–µ—Ü—å —á–∏ –¥—ñ–≤—á–∏–Ω–∞? üíôüíñ (–Ω–∞–ø–∏—à–∏ '—á–æ–ª–æ–≤—ñ–∫' –∞–±–æ '–∂—ñ–Ω–∫–∞')")
        return

    if user_id in waiting_for_gender:
        if "–∂" in lower_text:
            save_user(user_id, gender="–∂")
            waiting_for_gender.remove(user_id)
            await update.message.reply_text("–ó—Ä–æ–∑—É–º—ñ–ª–∞ üå∏ –¢–µ–ø–µ—Ä —è —Ç–µ–±–µ –ø–∞–º º—è—Ç–∞—é!")
        elif "—á" in lower_text:
            save_user(user_id, gender="—á")
            waiting_for_gender.remove(user_id)
            await update.message.reply_text("–ó—Ä–æ–∑—É–º—ñ–ª–∞ üíô –¢–µ–ø–µ—Ä —è —Ç–µ–±–µ –ø–∞–º º—è—Ç–∞—é!")
        else:
            await update.message.reply_text("–ù–∞–ø–∏—à–∏, –±—É–¥—å –ª–∞—Å–∫–∞, '–∂—ñ–Ω–∫–∞' –∞–±–æ '—á–æ–ª–æ–≤—ñ–∫' üåº")
        return

    user = get_user(user_id)
    name = user["name"] if user else None
    gender = user["gender"] if user else None
    short = gendered(name, gender)

    if not name:
        waiting_for_name.add(user_id)
        await update.message.reply_text("–ü—Ä–∏–≤ –∫—É, —è —Ç–µ–±–µ —â–µ –Ω–µ –∑–Ω–∞—é! –Ø–∫ —Ç–µ–±–µ –Ω–∞–∑–∏–≤–∞—Ç–∏? üí¨")
        return

    if "–æ–±—ñ–π–º–∏" in lower_text:
        await update.message.reply_text(f"–î–æ–±—Ä–µ, {short}, –ª–æ–≤–∏–∏–∏ –æ–±—ñ–π–º–∏! ü§ó")
    elif "—Å–∫–∞–∂–∏" in lower_text:
        await update.message.reply_text(f"–¢–∏ {gendered_phrase(gender, '—á—É–¥–æ–≤–∞', '—á—É–¥–æ–≤–∏–π')}, {short}. –Ø –∑–∞–≤–∂–¥–∏ –ø–æ—Ä—É—á üíó")
    elif "—á–∞—Å" in lower_text or "–≥–æ–¥–∏–Ω–∞" in lower_text:
        kyiv_time = datetime.datetime.now(pytz.timezone("Europe/Kyiv")).strftime("%H:%M")
        await update.message.reply_text(f"{short}, –∑–∞—Ä–∞–∑ –≤ –£–∫—Ä–∞—ó–Ω—ñ: {kyiv_time} üïê")
    elif "–∫–æ—Ç–∏–∫" in lower_text:
        await update.message.reply_animation("https://media.giphy.com/media/JIX9t2j0ZTN9S/giphy.gif")
    elif "–∑–∞–ø–∏—à–∏" in lower_text or "—ñ–º'—è" in lower_text:
        waiting_for_name.add(user_id)
        await update.message.reply_text("–ù–∞–ø–∏—à–∏, —è–∫ —Ç–µ–±–µ –Ω–∞–∑–∏–≤–∞—Ç–∏ üí¨")
    else:
        await update.message.reply_text(f"–ú—É—Ä? –Ø —â–µ –Ω–µ –∑–Ω–∞—é —Ü—ñ —Å–ª–æ–≤–∞, {short} ü•∫")

app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("status", status))
app.add_handler(CommandHandler("profile", profile))
app.add_handler(CommandHandler("hydrate", hydrate))
app.add_handler(CommandHandler("done", done))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

scheduler = BackgroundScheduler(timezone="Europe/Kyiv")
scheduler.add_job(lambda: None, "cron", hour=0, minute=0)  # –∑–∞–≥–ª—É—à–∫–∞, –±–æ –Ω–µ–º–∞—î todo
scheduler.start()

print("‚ú® –•—ñ–Ω–∞-–ë–æ—Ç–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ –∑ —É—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ —Ç–∞ –º—É—Ä–∫–æ—Ç—ñ–Ω–Ω—è–º üêæ")
app.run_polling()