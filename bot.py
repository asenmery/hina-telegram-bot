import datetime
import pytz
from tinydb import TinyDB, Query
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from apscheduler.schedulers.background import BackgroundScheduler

TOKEN = "8087039975:AAHilkGMZAIwQtglfaeApBHDpcNREqlpCNE"
db = TinyDB("/data/db.json")
User = Query()

waiting_for_name = set()
waiting_for_gender = set()

keyboard = [
    ["üÜï –ù–æ–≤–∞ —Å–ø—Ä–∞–≤–∞", "üìã –°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ —Å–ø—Ä–∞–≤–∏"],
    ["üß∏ –û–±—ñ–π–º–∏", "üò∫ –ö–æ—Ç–∏–∫"]
]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_user(user_id):
    result = db.search(User.id == user_id)
    return result[0] if result else None

def save_user(user_id, name=None, gender=None):
    user = get_user(user_id)
    if user:
        update_data = {}
        if name: update_data["name"] = name
        if gender: update_data["gender"] = gender
        db.update(update_data, User.id == user_id)
    else:
        db.insert({"id": user_id, "name": name, "gender": gender, "todo": []})

def gendered(name, gender):
    if gender == "–∂": return name or "–∑–∞–π—á–∏—á–∫–æ"
    elif gender == "—á": return name or "–∑–∞–π—á–∏–∫—É"
    else: return name or "–∑–∞–π—á–∏–∫"

def gendered_phrase(gender, feminine, masculine, neutral="—á—É–¥–æ–≤–∞(–∏–π)"):
    if gender == "–∂": return feminine
    elif gender == "—á": return masculine
    else: return neutral

def parse_date(text):
    today = datetime.date.today()
    weekdays = {"–ø–æ–Ω–µ–¥—ñ–ª–æ–∫": 0, "–≤—ñ–≤—Ç–æ—Ä–æ–∫": 1, "—Å–µ—Ä–µ–¥–∞": 2, "—á–µ—Ç–≤–µ—Ä": 3, "–ø º—è—Ç–Ω–∏—Ü—è": 4, "—Å—É–±–æ—Ç–∞": 5, "–Ω–µ–¥—ñ–ª—è": 6}
    text = text.strip().lower()
    if text == "—Å—å–æ–≥–æ–¥–Ω—ñ": return today.strftime("%Y-%m-%d")
    elif text == "–∑–∞–≤—Ç—Ä–∞": return (today + datetime.timedelta(days=1)).strftime("%Y-%m-%d")
    elif text in weekdays:
        current = today.weekday()
        target = weekdays[text]
        days_ahead = (target - current + 7) % 7 or 7
        return (today + datetime.timedelta(days=days_ahead)).strftime("%Y-%m-%d")
    try:
        return datetime.datetime.strptime(text, "%Y-%m-%d").strftime("%Y-%m-%d")
    except:
        return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤ –∫—É! –û–±–µ—Ä–∏ —â–æ—Å—å ‚§µÔ∏è", reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üíñ *–ü—Ä–∏–≤ –∫—É!* –Ø –•—ñ–Ω–∞-–ë–æ—Ç–∏–∫ ‚Äî —Ç–≤–æ—è –º º—è–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–∞ –ø–æ–º—ñ—á–Ω–∏—Ü—è üå∏\n\n"
        "–Ø –≤–º—ñ—é:\n"
        "‚Ä¢ –í–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–ø—Ä–∞–≤: `/todo –∫—É–ø–∏—Ç–∏ —á–∞–π | –∑–∞–≤—Ç—Ä–∞`\n"
        "‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø—Ä–∞–≤–∏: `/todo`, `/todo –∑–∞–≤—Ç—Ä–∞`, `/todo 2025-04-03`\n"
        "‚Ä¢ –í–∏–¥–∞–ª–∏—Ç–∏: `/todo del 1`\n"
        "‚Ä¢ –í—ñ–¥–º—ñ—Ç–∏—Ç–∏: `/done 1`\n"
        "‚Ä¢ –ü–∏—Ç–∏ –≤–æ–¥—É: `/hydrate`\n",
        parse_mode="Markdown")

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user(update.message.from_user.id)
    if user:
        name = user.get("name", "(–Ω–µ –≤–∫–∞–∑–∞–Ω–æ)")
        gender = user.get("gender", "(–Ω–µ –≤–∫–∞–∑–∞–Ω–æ)")
        await update.message.reply_text(f"üë§ –ü—Ä–æ—Ñ—ñ–ª—å:\n–Ü–º'—è: {name}\n–°—Ç–∞—Ç—å: {gender}")
    else:
        await update.message.reply_text("–Ø —Ç–µ–±–µ —â–µ –Ω–µ –∑–Ω–∞—é üòø –ù–∞–ø–∏—à–∏ '–ó–∞–ø–∏—à–∏ –º–æ—î —ñ–º º—è'")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –Ø –∂–∏–≤–∏–π —ñ –º—É—Ä—á—É —Å—Ç–∞–±—ñ–ª—å–Ω–æ! üêæ")

async def hydrate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üíß –ù–µ –∑–∞–±—É–¥—å –ø–æ–ø–∏—Ç–∏ –≤–æ–¥–∏—á–∫–∏, –º–æ—î —Å–µ—Ä–¥–µ–Ω—å–∫–æ!")

async def done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user(update.message.from_user.id)
    if not user: return await update.message.reply_text("–Ø —Ç–µ–±–µ —â–µ –Ω–µ –∑–Ω–∞—é üòø")
    try:
        i = int(context.args[0]) - 1
        user["todo"][i]["done"] = True
        db.update({"todo": user["todo"]}, User.id == user["id"])
        await update.message.reply_text("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ!")
    except:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –∞–±–æ –ø–æ–º–∏–ª–∫–∞ üòø")

async def todo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user(update.message.from_user.id)
    if not user:
        save_user(update.message.from_user.id)
        user = get_user(update.message.from_user.id)

    if context.args and context.args[0] == "del":
        try:
            i = int(context.args[1]) - 1
            removed = user["todo"].pop(i)
            db.update({"todo": user["todo"]}, User.id == user["id"])
            return await update.message.reply_text(f"‚ùå –í–∏–¥–∞–ª–µ–Ω–æ: {removed['text']}")
        except:
            return await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è üòø")

    if context.args:
        query = " ".join(context.args)
        if "|" in query:
            text, date_text = map(str.strip, query.split("|", 1))
            due = parse_date(date_text)
            if not due:
                return await update.message.reply_text("–ù–µ–≤—ñ–¥–æ–º–∞ –¥–∞—Ç–∞. –ü—Ä–∏–∫–ª–∞–¥: /todo –∫—É–ø–∏—Ç–∏ —á–∞–π | –∑–∞–≤—Ç—Ä–∞")
            user["todo"].append({"text": text, "due": due, "done": False})
            db.update({"todo": user["todo"]}, User.id == user["id"])
            return await update.message.reply_text(f"‚ûï –î–æ–¥–∞–Ω–æ –Ω–∞ {due}: {text}")

        due = parse_date(query)
        if due:
            tasks = [t for t in user["todo"] if t["due"] == due]
            if not tasks:
                return await update.message.reply_text(f"–ù–∞ {due} —É —Ç–µ–±–µ –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î ‚ú®")
            msg = f"üìÖ –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ {due}:\n"
            for i, t in enumerate(tasks):
                checkbox = "[x]" if t["done"] else "[ ]"
                msg += f"{i+1}. {checkbox} {t['text']}\n"
            return await update.message.reply_text(msg)

    today = datetime
